import threading
import time
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import keyboards
from database.models import Stat, User
from config import ADMINS
import moviepy.editor as mp
from states import SendSenderMessage

router = Router()


@router.message(Command('admin'))
async def admin_start(message: Message):
    if message.chat.id in ADMINS:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboards.admins.as_markup())


@router.callback_query(F.data == 'get_stat')
async def get_stat(call: CallbackQuery):
    stat = Stat.stat_today()
    await call.message.edit_text(
        f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: `{stat.add_user_count}`\n"
        f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: `{stat.block_user_count}`\n\n"
        f"‚è≥ –õ—é–¥–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: `{stat.get_all_users_count()}`",
        parse_mode='markdown',
        reply_markup=keyboards.admins.as_markup()
    )


@router.callback_query(F.data == 'start_sender')
async def get_message(call: CallbackQuery, state: FSMContext):
    await state.set_state(SendSenderMessage.send_message)
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")


@router.message(SendSenderMessage.send_message, F.video)
async def ask_admin(message: Message, state: FSMContext):
    file_id = message.video.file_id
    file = await message.bot.get_file(file_id)
    await message.bot.download_file(file.file_path, 'video.mp4')
    await state.update_data({'message_id': message.message_id, 'video': FSInputFile('video.mp4'), 'caption': message.caption})
    if not message.caption:
        await message.answer(
            "–í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫?",
            reply_markup=keyboards.note_or_video.as_markup()
        )


@router.callback_query(SendSenderMessage.send_message, F.data.startswith('admin_sender_choice'))
async def admin_sender_choice(call: CallbackQuery, state: FSMContext):
    choice = call.data.split(':')[1]

    if choice == 'video_note':
        await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫")
        input_video = mp.VideoFileClip("video.mp4")
        w, h = input_video.size
        circle_size = 360
        aspect_ratio = float(w) / float(h)

        if w > h:
            new_w = int(circle_size * aspect_ratio)
            new_h = circle_size
        else:
            new_w = circle_size
            new_h = int(circle_size / aspect_ratio)

        resized_video = input_video.resize((new_w, new_h))
        output_video = resized_video.crop(x_center=resized_video.w / 2, y_center=resized_video.h / 2, width=circle_size,
                                          height=circle_size)

        output_video.write_videofile("output_video.mp4", codec="libx264", audio_codec="aac", bitrate="1M", fps=25,
                                     threads=4)

        await state.update_data({'video_note': FSInputFile('output_video.mp4'), 'video': None})

    await state.set_state(SendSenderMessage.enter_urls)

    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏",
        reply_markup=keyboards.no_buttons.as_markup()
    )
    await call.message.answer(
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üî• –°—Ç—Ä–∞—Ç–µ–≥–∏—è üî• - https://example.com\n"
        "üí∞ –õ—É—á—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏ üí∞ - https://example1.com",
        reply_markup=keyboards.sender_example_urls.as_markup()
    )


@router.callback_query(F.data == 'no_buttons')
async def no_buttons(call: CallbackQuery, state: FSMContext):
    await start_sender(await state.get_data(), call.bot, [call.message.chat.id])
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É—à–∞",
        reply_markup=keyboards.type_of_push.as_markup(),
    )


@router.message(SendSenderMessage.enter_urls, F.text)
async def get_urls(message: Message, state: FSMContext):
    reply_markup = InlineKeyboardBuilder()
    for i in message.text.split('\n'):
        text, url = [i.strip() for i in i.split('-', maxsplit=1)]
        reply_markup.row(InlineKeyboardButton(text=text, url=url))

        if not url.startswith('http') or not text:
            return await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É –≤—ã—à–µ")

    await state.update_data({'reply_markup': reply_markup.as_markup()})
    await start_sender(await state.get_data(), message.bot, [message.chat.id])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É—à–∞",
        reply_markup=keyboards.type_of_push.as_markup(),
    )


@router.callback_query(F.data == 'instant_push')
async def instant_push(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    await start_sender(data, call.message.bot, [i.user_id for i in User.get_users()])


@router.callback_query(F.data == 'time_push')
async def enter_time_for_push(call: CallbackQuery, state: FSMContext):
    await state.set_state(SendSenderMessage.time_for_push)
    await call.message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–µ–π—á–∞—Å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å\n"
        "–ò–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú "
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: 09.01.2024 05:41)\n–í–ù–ò–ú–ê–ù–ò–ï! –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: UTC"
    )


@router.message(SendSenderMessage.time_for_push, F.text)
async def get_time_for_push(message: Message, state: FSMContext):
    try:
        d, m = message.text.split(' ')
        _, _, _ = [int(i) for i in d.split('.')]
        _, _ = [int(i) for i in m.split(':')]
        data = await state.get_data()
        await state.clear()
        await message.answer("–û–∂–∏–¥–∞–µ–º –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    except Exception as e:
        str(e)
        return await message.answer("–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü –µ—â—ë —Ä–∞–∑")


async def start_sender(data: dict, bot: Bot, users_id: list[int]):
    print(data)
    if data.get('video_note'):
        video_note = data['video_note']
        for user_id in users_id:
            try:
                msg = await bot.send_video_note(user_id, video_note, reply_markup=data.get('reply_markup'))
                video_note = msg.video_note.file_id
            except Exception as e:
                print(str(e))

    if data.get('video'):
        video = data['video']
        for user_id in users_id:
            try:
                msg = await bot.send_video(user_id, video, reply_markup=data.get('reply_markup'))
                video = msg.video.file_id
            except Exception as e:
                print(str(e))
